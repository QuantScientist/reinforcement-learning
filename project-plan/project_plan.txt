I plan to simulate targeted advertisement. Basically I'll have some imaginary
"website", which simulated users come to, and the "agent" decides which ads to
show from some pool to this user as he traverses the site.

    - Agent   = the system deciding which advertisement to show
    - Actions = show a single advertisement from a pool of possibilities
    - Reward  = 0 if user doesn't click, otherwise it depends on the
               advertisement. Maybe the reward received fluctuates to some
               degree?
    - State   = I'm not 100% sure on this yet. The idea presented in
               "Concurrent Reinforcement Learning from Customer Interactions"
                of storing the history of user interactions with the site seems
                interesting, but may turn out hard to implement. Maybe I'll
                just keep a list of "interests" that we have somehow gathered
                from the user as he has visited our "site".
    - Transitions = How the user traverses the site? I.e. the "interests" list
                    is refined. User leaves site at some point...

Maybe there could be also some notion of "annoyance", i.e. if too many ads are
shown or of a wrong type, the user may leave the site earlier...

I will do it in Python and maybe use one of the provided RL frameworks (e.g.
PyBrain, RLpy) if they seem useful.
